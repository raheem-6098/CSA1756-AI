import heapq

def a_star_algorithm(start, goal, grid):
    """
    A* algorithm implementation for a grid-based pathfinding problem.

    :param start: Tuple (x, y) representing the start position.
    :param goal: Tuple (x, y) representing the goal position.
    :param grid: 2D list representing the grid. 0 = free cell, 1 = obstacle.
    :return: List of nodes representing the path from start to goal.
    """
    def heuristic(a, b):
        """Heuristic function: Manhattan distance."""
        return abs(a[0] - b[0]) + abs(a[1] - b[1])

    
    open_list = []
    heapq.heappush(open_list, (0, start)) 
    
   
    came_from = {}
    g_score = {start: 0}
    f_score = {start: heuristic(start, goal)}

    
    while open_list:
        _, current = heapq.heappop(open_list)

        
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1]  

       
        neighbors = [
            (current[0] + dx, current[1] + dy)
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]
        ]
        
        for neighbor in neighbors:
            
            if (0 <= neighbor[0] < len(grid)) and (0 <= neighbor[1] < len(grid[0])) and grid[neighbor[0]][neighbor[1]] == 0:
               
                tentative_g_score = g_score[current] + 1  

                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    # Update scores and path
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                    heapq.heappush(open_list, (f_score[neighbor], neighbor))

   
    return []


if __name__ == "__main__":
    
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0]
    ]
    start = (0, 0)  
    goal = (4, 4)  

    path = a_star_algorithm(start, goal, grid)
    if path:
        print("Path found:", path)
    else:
        print("No path found.")
