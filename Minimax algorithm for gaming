empty = " "
player_1 = "X"
player_2 = "O"

def check_win(board, player):
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]) or all([board[j][i] == player for j in range(3)]):
            return True
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        return True
    if board[0][2] == player and board[1][1] == player and board[2][0] == player:
        return True
    return False

def game_over(board):
    return check_win(board, player_1) or check_win(board, player_2) or all(board[i][j] != empty for i in range(3) for j in range(3))

def minimax(board, depth, maximizing_player):
    if check_win(board, player_1):
        return 1
    if check_win(board, player_2):
        return -1
    if all(board[i][j] != empty for i in range(3) for j in range(3)):  # draw condition
        return 0
    
    if maximizing_player:
        max_eval = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == empty:
                    board[i][j] = player_1
                    eval = minimax(board, depth + 1, False)
                    board[i][j] = empty
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == empty:
                    board[i][j] = player_2
                    eval = minimax(board, depth + 1, True)
                    board[i][j] = empty
                    min_eval = min(min_eval, eval)
        return min_eval

def best_move(board):
    best_value = -float('inf')
    move = (-1, -1)
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == empty:
                board[i][j] = player_1
                move_value = minimax(board, 0, False)
                board[i][j] = empty
                if move_value > best_value:
                    best_value = move_value
                    move = (i, j)
    
    return move

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def play_game():
    board = [[empty for _ in range(3)] for _ in range(3)]
    current_player = player_1
    
    while not game_over(board):
        print_board(board)
        if current_player == player_1:
            print("Player 1's turn (X):")
            i, j = best_move(board)
            board[i][j] = player_1
        else:
            print("Player 2's turn (O):")
            i, j = best_move(board)
            board[i][j] = player_2
        
        current_player = player_2 if current_player == player_1 else player_1
    
    print_board(board)
    if check_win(board, player_1):
        print("Player 1 wins!")
    elif check_win(board, player_2):
        print("Player 2 wins!")
    else:
        print("It's a draw!")

play_game()
